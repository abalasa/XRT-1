name: XRT Build/Install Test CI

# Configures trigger:
# This workflow will be triggered on either a pull request created for Master branch or 
# When a change is merged to master branch
on:
  push:
    branches: [ master ]
  pull_request: 
    branches: [ master ]

# Define environment variables
# Can be accessed as $<envvar> or ${{ env.envvar }} in this workflow
env:
  RELEASE: 2021.1

jobs:
  build_lnx_matrix:
  # Start matrix style jobs for linux builds
    strategy:
      matrix:
        include:
         - os: centos74
           packageType: rpm
         - os: centos8
           packageType: rpm
         - os: al2
           packageType: rpm
         - os: ubuntu2004
           packageType: deb
    runs-on: self-hosted-docker-${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo src/runtime_src/tools/scripts/xrtdeps.sh -docker
    - name: XRT Centos74 Build
      if: ${{ matrix.os == 'centos74' }}
      run: |
        source /proj/xbuilds/${{ env.RELEASE }}_daily_latest/installs/lin64/Vitis/$RELEASE/settings64.sh
        cd build && chmod +x build.sh && scl enable devtoolset-9 -- bash -c ./build.sh
      shell: bash
    - name: XRT Build
      if: ${{ matrix.os == 'centos8' }}
      run: |
        source /proj/xbuilds/${{ env.RELEASE }}_daily_latest/installs/lin64/Vitis/$RELEASE/settings64.sh
        cd build && chmod +x build.sh && ./build.sh
      shell: bash
    - name: XRT Build
      if: ${{ matrix.os == 'ubuntu2004' || matrix.os == 'al2' }}
      run: |
        cd build && chmod +x build.sh && ./build.sh
      shell: bash
    - name: Stash files
      # Stash files for using later in the workflow
      uses: actions/upload-artifact@v2
      with:
        name: xrt-${{ matrix.packageType }}-${{ matrix.os }}
        path: build/Release/xrt_*-xrt.${{ matrix.packageType }}
    - name: Clean up workspace
      # Cleanup workspace build dirs
      if: ${{ always() }}
      run: |
        echo "Cleaning up previous run"
        rm -rf "$GITHUB_WORKSPACE/build/Debug" 
        rm -rf "$GITHUB_WORKSPACE/build/Release"
      shell: bash
  
  uninstall_lnx_xrt:
    # Prepare hosts for install verification and running emulation tests
    # Uninstalls previous installed XRT packages on Linux
    strategy:
      matrix:
        os: [centos74]      
    runs-on: self-hosted-${{ matrix.os }}
    steps:
      - name: Uninstall xrt rpms
        run: ${{ secrets.SUDO }} yum remove -y xrt xrt-aws

  build_win_matrix:
    # Start matrix style job for Windows10 builds
    strategy:
      matrix:
        include:
         - os: windows10
           packageType: exe      
    runs-on: self-hosted-${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: XRT Windows Build
        run: >-
          call C:\"Program Files (x86)"\"Microsoft Visual Studio"\2017\Community\VC\Auxiliary\Build\vcvars64.bat &
          cd build &
          build.bat -release
        shell: cmd
      - name: Stash files Win10
        uses: actions/upload-artifact@v2
        with:
         name: xrt-${{ matrix.packageType }}-${{ matrix.os }}
         path: build\WRelease\xilinx\xrt\bin\unwrapped\*.${{ matrix.packageType }}
      - name: Cleanup workspace
        if: ${{ always() }}
        run: >-
          echo "Cleaning up previous run" &
          @RD /S /Q "${{ github.workspace }}/build/WRelease"
        shell: cmd
  
  build_xrt_edge:
    # Start matrix style jobs to build XRT for Edge platforms
    strategy:
      matrix:
       include:
         - platform: zynq
           releaseDir: aarch32
         - platform: versal
           releaseDir: versal
    runs-on: self-hosted-docker-${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v2
    - name: XRT for Edge platform Build
      run: |
        unset http_proxy https_proxy
        mkdir -p /tmp/
        cd build 
        chmod +x build_edge.sh 
        sh build_edge.sh -setup /proj/xbb/xrt-embedded/$RELEASE/sw/xrt_pr/${{ matrix.platform }}/petalinux.setup
      shell: bash
    - name: Cleanup Runner workspace
      if: ${{ always() }}
      run: |
        echo "Cleaning up previous run"
        rm -rf "$GITHUB_WORKSPACE/build/${{ matrix.platform.releaseDir }}" 
        rm -rf "/tmp/*"
      shell: bash
  
  board_reset:
    # Reset boardfarm host by removing previously installed XRT, XSA and cold reboot.
    runs-on: self-hosted-bf-runner
    steps:
      - name: Reset board
        run: |
          cd /scratch/bf-logs
          ${{ secrets.BF_COMMAND }} --log-file /scratch/bf-logs/board_reset.log xrt-reset -n ${{ secrets.BF_HOST }}
        shell: bash

  install_lnx_matrix:
    # Start matrix style jobs Install XRT built in this workflow
    environment: Test
    strategy:
      matrix:
        os: [centos74]        
    runs-on: self-hosted-${{ matrix.os }}
    needs: [build_lnx_matrix, uninstall_lnx_xrt]
    steps:
      - name: Download XRT packages
        uses: actions/download-artifact@v2
        with:
          name: xrt-rpm-${{ matrix.os }}
      - name: Install XRT
        run: ls -al; ${{ secrets.SUDO }} yum install -y ./*.rpm
  
  board_test:
    # Run boardfarm tests after approval from "Test"
    environment: Test
    runs-on: self-hosted-bf-runner
    needs: [build_lnx_matrix, board_reset]
    steps:
      - name: Download XRT rpms
        uses: actions/download-artifact@v2
        with:
          name: xrt-rpm-centos74
          path: /tmp/test-artifacts
      - name: Copy to bf 
        run: |
          scp /tmp/test-artifacts/*.rpm ${{ secrets.BF_HOST }}:/home/${{ secrets.BF_USER }}/xrt-test-artifacts
      - name: Run on board
        run: |
          cd /scratch/bf-logs 
          ${{ secrets.BF_COMMAND }} --log-file /scratch/bf-logs/test.OUTPUT xrt-test -n ${{ secrets.BF_HOST }} -p xilinx_u50_gen3x16_xdma_201920_3 -r $RELEASE -x /home/${{ secrets.BF_USER }}/xrt-test-artifacts/*-xrt.rpm --test_path ${{ secrets.PCIE_HW_TESTS_PATH }} --timeout 2400 --results-path /scratch/bf-logs/
        shell: bash

  test_win:
    # Windows executable verification
    strategy:
      matrix:
        os: [windows10]      
    runs-on: self-hosted-${{ matrix.os }}
    needs: [build_win_matrix]
    steps:
      - name: Download XRT win exes
        uses: actions/download-artifact@v2
        with:
         name: xrt-exe-${{ matrix.os }}
      - name: XRT Windows Build
        run: >-
          call C:\"Program Files (x86)"\"Microsoft Visual Studio"\2017\Community\VC\Auxiliary\Build\vcvars64.bat &
          xclbinutil.exe
        shell: cmd

  hw_emulation_tests:
    # Run Emulation tests on host XRT package is installed
    runs-on: self-hosted-centos74
    needs: [install_lnx_matrix]
    steps:
      - name: Run HW Emulation tests
        run: |
          source /proj/xbuilds/${{ env.RELEASE }}_daily_latest/installs/lin64/Vitis/$RELEASE/settings64.sh
          source /opt/xilinx/xrt/setup.sh
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/proj/xbuilds/${{ env.RELEASE }}_daily_latest/installs/lin64/Vitis/$RELEASE/lib/lnx64.o/Default
          cd /scratch/xrt_tests/HW_EMULATION_TESTS/sub_buffer_object_4cus-hw_emu-xilinx_u250_gen3x16_xdma_3_1_202020_1
          export XCL_EMULATION_MODE=hw_emu;  ./host.exe krnl_vadd_4cus.xclbin
          #cd /scratch/xrt_tests
          #${{ secrets.PYTHON }} xrt.py --chooseEmu HW_EMU --runTest True
        shell: bash
