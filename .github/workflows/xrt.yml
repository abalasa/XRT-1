name: XRT Build/Install Test CI

on:
  push:
    branches: [ master ]
  pull_request: 
    branches: [ master ]

env:
  RELEASE: 2021.1

jobs:
#   code_analysis:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#     - uses: microsoft/DevSkim-Action@v1
#     - uses: github/codeql-action/upload-sarif@v1
#       with:
#         sarif_file: devskim-results.sarif
#     - name: Stash files 
#       uses: actions/upload-artifact@v2
#       with:
#         name: xrt-code-analysis
#         path: devskim-results.sarif

  yml_parser:
    runs-on: self-hosted-centos74
    steps:
      - uses: CumulusDS/get-yaml-paths-action@v0.1.0
        id: resultsYML
        with:
          file: ${{ secrets.EXTRACTION_AREA }}/159/test-results/pcie_lnx64.yml
      - name: print stats
        run: |
          echo ${{ steps.resultsYML.outputs }}
        shell: bash

  build_lnx_matrix:
    strategy:
      matrix:
        os: [centos74]
    runs-on: self-hosted-docker-${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo src/runtime_src/tools/scripts/xrtdeps.sh -docker
    - name: XRT Centos74 Build
      if: ${{ matrix.os == 'centos74' }}
      run: |
        source /proj/xbuilds/2021.1_daily_latest/installs/lin64/Vitis/2021.1/settings64.sh
        cd build && chmod +x build.sh && scl enable devtoolset-9 -- bash -c ./build.sh
      shell: bash
    - name: XRT Build
      if: ${{ matrix.os == 'centos8' }}
      run: |
        source /proj/xbuilds/2021.1_daily_latest/installs/lin64/Vitis/2021.1/settings64.sh
        cd build && chmod +x build.sh && ./build.sh
      shell: bash
    - name: XRT Build
      if: ${{ matrix.os == 'ubuntu2004' || matrix.os == 'al2' }}
      run: |
        cd build && chmod +x build.sh && ./build.sh
      shell: bash
    - name: Stash files Centos
      if: ${{ matrix.os == 'centos74' || matrix.os == 'centos8' || matrix.os == 'al2'}}
      uses: actions/upload-artifact@v2
      with:
        name: xrt-rpm-${{ matrix.os }}
        path: build/Release/xrt_*-xrt.rpm
    - name: Stash files Centos
      if: ${{ matrix.os == 'centos74'}}
      uses: actions/upload-artifact@v2
      with:
        name: xrt-rpm-tar-${{ matrix.os }}
        path: build/Release/xrt_*-xrt.tar.gz
    - name: Stash files Ubuntu
      if: ${{ matrix.os == 'ubuntu2004' }}
      uses: actions/upload-artifact@v2
      with:
        name: xrt-deb-${{ matrix.os }}
        path: build/Release/xrt_*-xrt.deb
    - name: Runner workspace path
      if: ${{ always() }}
      run: |
        echo "Cleaning up previous run"
        rm -rf "$GITHUB_WORKSPACE/build/Debug" 
        rm -rf "$GITHUB_WORKSPACE/build/Release"
      shell: bash
  
#   uninstall_lnx_xrt:
#     strategy:
#       matrix:
#         os: [centos74]      
#     runs-on: self-hosted-${{ matrix.os }}
#     steps:
#       - name: Uninstall xrt rpms
#         run: ${{ secrets.SUDO }} yum remove -y xrt xrt-aws

#   build_win_matrix:
#     strategy:
#       matrix:
#         os: [windows10]      
#     runs-on: self-hosted-${{ matrix.os }}
#     steps:
#       - uses: actions/checkout@v2
#       - name: XRT Windows Build
#         run: >-
#           call C:\"Program Files (x86)"\"Microsoft Visual Studio"\2017\Community\VC\Auxiliary\Build\vcvars64.bat &
#           cd build &
#           build.bat -release
#         shell: cmd
#       - name: Stash files Win10
#         uses: actions/upload-artifact@v2
#         with:
#          name: xrt-exe-${{ matrix.os }}
#          path: build\WRelease\xilinx\xrt\bin\unwrapped\*.exe
#       - name: Runner workspace path
#         if: ${{ always() }}
#         run: >-
#           echo "Cleaning up previous run" &
#           @RD /S /Q "${{ github.workspace }}/build/WRelease"
#         shell: cmd
  
#   build_xrt_edge:
#     strategy:
#       matrix:
#        include:
#          - platform: zynq
#            releasedir: aarch32
#     runs-on: self-hosted-docker-${{ matrix.platform }}
#     steps:
#     - uses: actions/checkout@v2
#     - name: XRT for Edge platform Build
#       run: |
#         unset http_proxy https_proxy
#         mkdir -p /tmp/
#         cd build 
#         chmod +x build_edge.sh 
#         sh build_edge.sh -setup /proj/xbb/xrt-embedded/$RELEASE/sw/xrt_pr/${{ matrix.platform }}/petalinux.setup
#         rm -rf /tmp/*
#       shell: bash
#     - name: Cleanup Runner workspace path
#       if: ${{ always() }}
#       run: |
#         echo "Cleaning up previous run"
#         rm -rf "$GITHUB_WORKSPACE/build/${{ matrix.platform.releasedir }}" 
#         rm -rf "/tmp/*"
#       shell: bash
  
#   board_reset:
#     runs-on: self-hosted-bf-runner
#     steps:
#       - name: Reset board
#         run: |
#           cd /scratch/bf-logs
#           ${{ secrets.BF_COMMAND }} --log-file /scratch/bf-logs/board_reset.log xrt-reset -n ${{ secrets.BF_HOST }}
#         shell: bash

#   install_lnx_matrix:
#     environment: Test
#     strategy:
#       matrix:
#         os: [centos74]        
#     runs-on: self-hosted-${{ matrix.os }}
#     needs: [build_lnx_matrix, uninstall_lnx_xrt]
#     steps:
#       - name: Download XRT rpms
#         uses: actions/download-artifact@v2
#         with:
#           name: xrt-rpm-${{ matrix.os }}
#       - name: Install xrt rpms
#         run: ls -al; ${{ secrets.SUDO }} yum install -y ./*.rpm
  
#   board_test:
#     environment: Test
#     runs-on: self-hosted-bf-runner
#     needs: [build_lnx_matrix, board_reset]
#     steps:
#       - name: Download XRT rpms
#         uses: actions/download-artifact@v2
#         with:
#           name: xrt-rpm-centos74
#           path: /tmp/test-artifacts
#       - name: Copy to bf 
#         run: |
#           scp /tmp/test-artifacts/*.rpm ${{ secrets.BF_HOST }}:/home/${{ secrets.BF_USER }}/xrt-test-artifacts
#       - name: Run on board
#         run: |
#           cd /scratch/bf-logs 
#           ${{ secrets.BF_COMMAND }} --log-file /scratch/bf-logs/test.OUTPUT xrt-test -n ${{ secrets.BF_HOST }} -p xilinx_u50_gen3x16_xdma_201920_3 -r 2020.3 -x /home/${{ secrets.BF_USER }}/xrt-test-artifacts/*-xrt.rpm --test_path ${{ secrets.PCIE_HW_TESTS_PATH }} --timeout 2400 --results-path /scratch/bf-logs/
#         shell: bash

#   test_win:
#     strategy:
#       matrix:
#         os: [windows10]      
#     runs-on: self-hosted-${{ matrix.os }}
#     needs: [build_win_matrix]
#     steps:
#       - name: Download XRT win exes
#         uses: actions/download-artifact@v2
#         with:
#          name: xrt-exe-${{ matrix.os }}
#       - name: XRT Windows Build
#         run: >-
#           call C:\"Program Files (x86)"\"Microsoft Visual Studio"\2017\Community\VC\Auxiliary\Build\vcvars64.bat &
#           xclbinutil.exe
#         shell: cmd

  hw_emulation_tests:
    runs-on: self-hosted-centos74
    needs: [build_lnx_matrix]
    steps:
      - name: Cleanup /tmp/emulation_tests
        run: |
          mkdir -p ${{ secrets.EXTRACTION_AREA }}/$GITHUB_RUN_NUMBER/test-results ${{ secrets.EXTRACTION_AREA }}/$GITHUB_RUN_NUMBER/build
        shell: bash
      - name: Download XRT tar
        uses: actions/download-artifact@v2
        with:
          name: xrt-rpm-tar-centos74
#       - name: Run HW Emulation tests
#         run: |
#           source /proj/xbuilds/2021.1_daily_latest/installs/lin64/Vitis/2021.1/settings64.sh
#           source /opt/xilinx/xrt/setup.sh
#           export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/proj/xbuilds/2021.1_daily_latest/installs/lin64/Vitis/2021.1/lib/lnx64.o/Default
#           cd /scratch/xrt_tests/HW_EMULATION_TESTS/sub_buffer_object_4cus-hw_emu-xilinx_u250_gen3x16_xdma_3_1_202020_1
#           export XCL_EMULATION_MODE=hw_emu;  ./host.exe krnl_vadd_4cus.xclbin
#           #cd /scratch/xrt_tests
#           #${{ secrets.PYTHON }} xrt.py --chooseEmu HW_EMU --runTest True
#         shell: bash
      - name: Run Emulation tests using rdi
        run: |
          tar -xzf xrt_*-xrt.tar.gz -C ${{ secrets.EXTRACTION_AREA }}/$GITHUB_RUN_NUMBER/build/
          export PROFILE_PATH=/proj/xbb/xrt/prod_pipeline/configs/2021.1/pcie/sw_emu/gating.prf WS_PATH=$GITHUB_WORKSPACE RDI_DATA=${{ secrets.EXTRACTION_AREA }}/$GITHUB_RUN_NUMBER/test-results BUILD_NUMBER=$GITHUB_RUN_NUMBER XRT_BUILD_PATH=${{ secrets.EXTRACTION_AREA }}/$GITHUB_RUN_NUMBER/build/
          rdi regression --profile /proj/xbb/xrt/prod_pipeline/configs/2021.1/pcie/sw_emu/gating.prf --report-path ${{ secrets.EXTRACTION_AREA }}/$GITHUB_RUN_NUMBER/test-results --results-path ${{ secrets.EXTRACTION_AREA }}/$GITHUB_RUN_NUMBER/test-results --suite-category GATING,XRT
        shell: bash
      - name: Cleanup Runner workspace path
        if: ${{ always() }}
        run: |
          echo "Cleaning up previous run"
          rm -rf $GITHUB_WORKSPACE/xrt_*-xrt.tar.gz
          rm -rf ${{ secrets.EXTRACTION_AREA }}/$GITHUB_RUN_NUMBER/build/
        shell: bash

